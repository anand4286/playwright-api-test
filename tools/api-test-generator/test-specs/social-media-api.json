{
  "openapi": "3.0.0",
  "info": {
    "title": "Social Media Platform API",
    "description": "Comprehensive social media platform API for managing users, posts, comments, likes, follows, and messaging",
    "version": "1.8.2",
    "contact": {
      "name": "Social Media API Team",
      "email": "developers@socialmedia.com",
      "url": "https://developers.socialmedia.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.socialmedia.com/v1",
      "description": "Production API"
    },
    {
      "url": "https://staging-api.socialmedia.com/v1",
      "description": "Staging environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Search users",
        "description": "Search for users by username, email, or display name with pagination",
        "operationId": "searchUsers",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Search query (username, email, or display name)",
            "schema": {
              "type": "string",
              "minLength": 2
            }
          },
          {
            "name": "verified",
            "in": "query",
            "description": "Filter by verified status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of users per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users matching search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserProfile"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Register new user",
        "description": "Create a new user account with email verification",
        "operationId": "registerUser",
        "tags": ["Users"],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "verification_token": {
                      "type": "string",
                      "description": "Email verification token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "description": "Username or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user profile",
        "description": "Retrieve public profile information for a specific user",
        "operationId": "getUserProfile",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User identifier (ID or username)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "summary": "Update user profile",
        "description": "Update the authenticated user's profile information",
        "operationId": "updateUserProfile",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/users/{userId}/follow": {
      "post": {
        "summary": "Follow user",
        "description": "Follow another user to see their posts in feed",
        "operationId": "followUser",
        "tags": ["Social"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully followed user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Follow"
                }
              }
            }
          },
          "400": {
            "description": "Cannot follow yourself or already following",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Unfollow user",
        "description": "Stop following a user",
        "operationId": "unfollowUser",
        "tags": ["Social"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully unfollowed user"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "summary": "Get posts feed",
        "description": "Retrieve personalized feed of posts from followed users and recommended content",
        "operationId": "getFeed",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Feed type",
            "schema": {
              "type": "string",
              "enum": ["timeline", "trending", "following"],
              "default": "timeline"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Get posts since this timestamp",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Posts feed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Post"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create new post",
        "description": "Create a new post with text, images, or video content",
        "operationId": "createPost",
        "tags": ["Posts"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "maxLength": 2000
                  },
                  "media": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "maxItems": 10
                  },
                  "privacy": {
                    "type": "string",
                    "enum": ["public", "friends", "private"]
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "413": {
            "description": "Media file too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/posts/{postId}": {
      "get": {
        "summary": "Get post details",
        "description": "Retrieve detailed information about a specific post",
        "operationId": "getPost",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostDetailed"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "403": {
            "description": "Post is private and user doesn't have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update post",
        "description": "Update an existing post (only by the author)",
        "operationId": "updatePost",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Delete post",
        "description": "Delete a post (only by the author or admin)",
        "operationId": "deletePost",
        "tags": ["Posts"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Post deleted successfully"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/posts/{postId}/like": {
      "post": {
        "summary": "Like post",
        "description": "Add a like to a post",
        "operationId": "likePost",
        "tags": ["Social"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post liked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          },
          "409": {
            "description": "Post already liked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Unlike post",
        "description": "Remove like from a post",
        "operationId": "unlikePost",
        "tags": ["Social"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Post unliked successfully"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/posts/{postId}/comments": {
      "get": {
        "summary": "Get post comments",
        "description": "Retrieve comments for a specific post with threading support",
        "operationId": "getPostComments",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for comments",
            "schema": {
              "type": "string",
              "enum": ["newest", "oldest", "popular"],
              "default": "newest"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "summary": "Add comment to post",
        "description": "Create a new comment on a post",
        "operationId": "addComment",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/comments/{commentId}": {
      "patch": {
        "summary": "Update comment",
        "description": "Update an existing comment (only by the author)",
        "operationId": "updateComment",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1000
                  }
                },
                "required": ["content"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Delete comment",
        "description": "Delete a comment (only by the author or admin)",
        "operationId": "deleteComment",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted successfully"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/messages": {
      "get": {
        "summary": "Get message conversations",
        "description": "Retrieve list of message conversations for the authenticated user",
        "operationId": "getConversations",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "unread_only",
            "in": "query",
            "description": "Show only unread conversations",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of conversations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Conversation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Send message",
        "description": "Send a new message to a user or existing conversation",
        "operationId": "sendMessage",
        "tags": ["Messages"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "description": "Cannot message this user (blocked or privacy settings)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/messages/{conversationId}": {
      "get": {
        "summary": "Get conversation messages",
        "description": "Retrieve messages from a specific conversation",
        "operationId": "getConversationMessages",
        "tags": ["Messages"],
        "parameters": [
          {
            "name": "conversationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Get messages before this timestamp",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversation": {
                      "$ref": "#/components/schemas/Conversation"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Message"
                      }
                    },
                    "has_more": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "summary": "Get user notifications",
        "description": "Retrieve notifications for the authenticated user",
        "operationId": "getNotifications",
        "tags": ["Notifications"],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter by notification type",
            "schema": {
              "type": "string",
              "enum": ["like", "comment", "follow", "mention", "message"]
            }
          },
          {
            "name": "unread_only",
            "in": "query",
            "description": "Show only unread notifications",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notifications": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Notification"
                      }
                    },
                    "unread_count": {
                      "type": "integer"
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{notificationId}/read": {
      "patch": {
        "summary": "Mark notification as read",
        "description": "Mark a specific notification as read",
        "operationId": "markNotificationRead",
        "tags": ["Notifications"],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,30}$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "display_name": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "bio": {
            "type": "string",
            "maxLength": 500
          },
          "verified": {
            "type": "boolean"
          },
          "follower_count": {
            "type": "integer"
          },
          "following_count": {
            "type": "integer"
          },
          "post_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "username", "email", "display_name"]
      },
      "UserProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "is_following": {
                "type": "boolean",
                "description": "Whether the current user follows this user"
              },
              "is_followed_by": {
                "type": "boolean",
                "description": "Whether this user follows the current user"
              },
              "is_blocked": {
                "type": "boolean",
                "description": "Whether this user is blocked by the current user"
              },
              "privacy_settings": {
                "type": "object",
                "properties": {
                  "private_profile": {
                    "type": "boolean"
                  },
                  "direct_messages": {
                    "type": "string",
                    "enum": ["everyone", "followers", "none"]
                  }
                }
              }
            }
          }
        ]
      },
      "UserRegistration": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]{3,30}$"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8
          },
          "display_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "birth_date": {
            "type": "string",
            "format": "date"
          },
          "terms_accepted": {
            "type": "boolean"
          }
        },
        "required": ["username", "email", "password", "display_name", "terms_accepted"]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "maxLength": 50
          },
          "bio": {
            "type": "string",
            "maxLength": 500
          },
          "avatar_url": {
            "type": "string",
            "format": "uri"
          },
          "privacy_settings": {
            "type": "object",
            "properties": {
              "private_profile": {
                "type": "boolean"
              },
              "direct_messages": {
                "type": "string",
                "enum": ["everyone", "followers", "none"]
              },
              "show_online_status": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "content": {
            "type": "string",
            "maxLength": 2000
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Media"
            }
          },
          "privacy": {
            "type": "string",
            "enum": ["public", "friends", "private"]
          },
          "like_count": {
            "type": "integer"
          },
          "comment_count": {
            "type": "integer"
          },
          "share_count": {
            "type": "integer"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "author", "content", "privacy", "created_at"]
      },
      "PostDetailed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "type": "object",
            "properties": {
              "is_liked": {
                "type": "boolean",
                "description": "Whether the current user has liked this post"
              },
              "recent_likes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "maxItems": 10,
                "description": "Recent users who liked this post"
              },
              "recent_comments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Comment"
                },
                "maxItems": 5,
                "description": "Recent comments on this post"
              }
            }
          }
        ]
      },
      "PostCreate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "media_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "maxItems": 10
          },
          "privacy": {
            "type": "string",
            "enum": ["public", "friends", "private"],
            "default": "public"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_]{1,30}$"
            },
            "maxItems": 10
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optional scheduled publication time"
          }
        },
        "required": ["content"]
      },
      "PostUpdate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "privacy": {
            "type": "string",
            "enum": ["public", "friends", "private"]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_]{1,30}$"
            },
            "maxItems": 10
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "post_id": {
            "type": "string",
            "format": "uuid"
          },
          "author": {
            "$ref": "#/components/schemas/User"
          },
          "content": {
            "type": "string",
            "maxLength": 1000
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent comment ID for threaded comments"
          },
          "like_count": {
            "type": "integer"
          },
          "reply_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "replies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {"type": "string", "format": "uuid"},
                "content": {"type": "string"},
                "author_name": {"type": "string"},
                "created_at": {"type": "string", "format": "date-time"}
              }
            },
            "description": "Nested replies to this comment (simplified to avoid recursion)"
          }
        },
        "required": ["id", "post_id", "author", "content", "created_at"]
      },
      "CommentCreate": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          },
          "parent_id": {
            "type": "string",
            "format": "uuid",
            "description": "Parent comment ID for replies"
          }
        },
        "required": ["content"]
      },
      "Follow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "follower": {
            "$ref": "#/components/schemas/User"
          },
          "following": {
            "$ref": "#/components/schemas/User"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Like": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "post_id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Media": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["image", "video", "gif"]
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "thumbnail_url": {
            "type": "string",
            "format": "uri"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes"
          },
          "alt_text": {
            "type": "string",
            "maxLength": 200,
            "description": "Alternative text for accessibility"
          }
        },
        "required": ["id", "type", "url"]
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "last_message": {
            "$ref": "#/components/schemas/Message"
          },
          "unread_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "conversation_id": {
            "type": "string",
            "format": "uuid"
          },
          "sender": {
            "$ref": "#/components/schemas/User"
          },
          "content": {
            "type": "string",
            "maxLength": 1000
          },
          "message_type": {
            "type": "string",
            "enum": ["text", "image", "video", "file"],
            "default": "text"
          },
          "media": {
            "$ref": "#/components/schemas/Media"
          },
          "read_by": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "read_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "conversation_id", "sender", "content", "created_at"]
      },
      "MessageCreate": {
        "type": "object",
        "properties": {
          "recipient_id": {
            "type": "string",
            "format": "uuid",
            "description": "User ID to send message to (for new conversations)"
          },
          "conversation_id": {
            "type": "string",
            "format": "uuid",
            "description": "Existing conversation ID"
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          },
          "message_type": {
            "type": "string",
            "enum": ["text", "image", "video", "file"],
            "default": "text"
          },
          "media_url": {
            "type": "string",
            "format": "uri",
            "description": "URL for media messages"
          }
        },
        "required": ["content"],
        "oneOf": [
          {
            "required": ["recipient_id"]
          },
          {
            "required": ["conversation_id"]
          }
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["like", "comment", "follow", "mention", "message"]
          },
          "actor": {
            "$ref": "#/components/schemas/User",
            "description": "User who triggered the notification"
          },
          "object_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the related object (post, comment, etc.)"
          },
          "object_type": {
            "type": "string",
            "enum": ["post", "comment", "user", "message"]
          },
          "message": {
            "type": "string",
            "description": "Human-readable notification message"
          },
          "read": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "type", "actor", "message", "read", "created_at"]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "pages": {
            "type": "integer",
            "minimum": 1
          },
          "has_next": {
            "type": "boolean"
          },
          "has_prev": {
            "type": "boolean"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "path": {
            "type": "string"
          }
        },
        "required": ["error", "message"]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - invalid parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Access denied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": "User account management and profiles"
    },
    {
      "name": "Posts",
      "description": "Content creation and management"
    },
    {
      "name": "Comments",
      "description": "Comment system with threading support"
    },
    {
      "name": "Social",
      "description": "Social interactions - follows, likes, shares"
    },
    {
      "name": "Messages",
      "description": "Direct messaging system"
    },
    {
      "name": "Notifications",
      "description": "User notification management"
    }
  ]
}
